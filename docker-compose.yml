version: "3.9"
services:
# ──────────────────────────── infrastructure ────────────────────────────
  nginx:
    image: nginx:1.27-alpine
    restart: unless-stopped
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./certs:/etc/nginx/certs:ro"
      - "./logs/nginx:/var/log/nginx"
      - "./dist/main:/usr/share/nginx/html/main:ro"
    ports:
      - "80:80"
      - "443:443"
    depends_on: [backend, frontend]
    networks: [app]

# ──────────────────────────── application ───────────────────────────────
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: vpn
      POSTGRES_PASSWORD: changeme
      POSTGRES_DB: vpn
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d postgres"]
      interval: 5s
      retries: 5
    networks: [app]

  backend:
    build:
      context: .
      dockerfile: apps/server/Dockerfile
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "npx prisma migrate deploy &&
             node dist/index.js"
    healthcheck:
      test: ["CMD-SHELL","curl -sf http://localhost:8080/healthz | grep OK || exit 1"]
      interval: 10s
      retries: 5
    networks: [app]
    ports:
      - 8080:8080


  frontend:
    build:
      context: ./apps/main
      dockerfile: ../../Dockerfile.frontend
      args:
        - VITE_API_BASE_URL
    env_file: ./.env
    depends_on:
      backend:
        condition: service_started
    networks: [app]

volumes:
  postgres-data:

networks:
  app:
