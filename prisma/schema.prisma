datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id              String           @id @default(cuid())
  email           String?          @unique
  username        String?          @unique
  firstName       String?
  lastName        String?
  photoUrl        String?
  telegramId      String?          @unique
  passwordHash    String?
  uuid            String           @unique
  role            Role             @default(USER)
  preallocatedUid PreallocatedUid?
  Vpn             Vpn[]
  Subscription    Subscription?
  AuditLog        AuditLog[]
  RefreshToken    RefreshToken[]
  telegram        TelegramAccount?
  creds           Credentials?
  checkSecret     UserCheckSecret?
  PlanUse         PlanUse[]
}

model Vpn {
  id        String    @id @default(cuid())
  name      String
  ownerId   String
  status    VpnStatus @default(OFFLINE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  owner     User      @relation(fields: [ownerId], references: [id])
  Job       Job[]
}

enum VpnStatus {
  ONLINE
  OFFLINE
  WARNING
  PENDING
}

enum PlanCode {
  BASIC_1M
  BASIC_3M
  BASIC_6M
  BASIC_12M
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
}

model Job {
  id        String   @id @default(cuid())
  vpnId     String
  type      String
  status    String
  output    String?
  createdAt DateTime @default(now())
  vpn       Vpn      @relation(fields: [vpnId], references: [id])
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  stripeSubId   String   @unique
  status        String   @default("active")
  planId        String
  maxActiveVpns Int
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model SubscriptionLinkTemplate {
  id          Int      @id @default(1)
  urlTemplate String
  updatedAt   DateTime @updatedAt
}

enum AuditAction {
  LOGIN
  LOGOUT
  VPN_CREATE
  VPN_DELETE
  VPN_RESTART
  TEMPLATE_EDIT
  SUBSCRIPTION_STATUS
}

model AuditLog {
  id        String      @id @default(cuid())
  userId    String?
  action    AuditAction
  payload   Json
  createdAt DateTime    @default(now())
  user      User?       @relation(fields: [userId], references: [id])
}

model SubPushQueue {
  id          String    @id @default(cuid())
  uuid        String    @unique
  subString   String
  tries       Int       @default(0)
  lastError   String?
  nextRetryAt DateTime?
}

model PreallocatedUid {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique
  isFree     Boolean   @default(true)
  assignedAt DateTime?
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @unique
}

model Plan {
  code       PlanCode    @id
  name       String
  priceRub   Int
  durationMo Int
  maxVpns    Int         @default(5)
  isActive   Boolean     @default(true)
  PlanCache  PlanCache[]
  PlanUse    PlanUse[]
}

model Invoice {
  id         String        @id @default(cuid())
  planCode   PlanCode
  userId     String
  amountRub  Int
  status     InvoiceStatus @default(PENDING)
  onramperId String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model TelegramAccount {
  userId   String  @id @map("user_id")
  user     User    @relation(fields: [userId], references: [id])
  tgid     BigInt  @unique
  hash     String
  username String?
}

model Credentials {
  userId   String @id
  email    String @unique
  passHash String
  user     User   @relation(fields: [userId], references: [id])
}

model UserCheckSecret {
  userId String @id
  secret String
  user   User   @relation(fields: [userId], references: [id])
}

model BuildTag {
  id        Int      @id @default(autoincrement())
  tag       String   @unique
  createdAt DateTime @default(now())
}

model SubtaskQueue {
  id        Int      @id @default(autoincrement())
  taskId    Int
  status    String   @default("waiting")
  payload   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //  —–– возможная связь на Job (если нужна):
  // job   Job   @relation(fields:[taskId], references:[id])
}

model PlanCache {
  id        Int      @id @default(autoincrement())
  planCode  PlanCode
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Plan Plan @relation(fields: [planCode], references: [code])
}

model PlanUse {
  id       Int      @id @default(autoincrement())
  planCode PlanCode
  userId   String
  usedAt   DateTime @default(now())

  Plan Plan @relation(fields: [planCode], references: [code])
  User User @relation(fields: [userId], references: [id])
}
