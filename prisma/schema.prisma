datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  nickname        String?          @unique
  telegramId      String?          @unique
  passwordHash    String
  uuid            String           @unique
  role            Role             @default(USER)
  preallocatedUid PreallocatedUid?
  Vpn             Vpn[]
  Subscription    Subscription?
  AuditLog        AuditLog[]
}

model Vpn {
  id        String    @id @default(cuid())
  name      String
  ownerId   String
  status    VpnStatus @default(OFFLINE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  owner     User      @relation(fields: [ownerId], references: [id])
  Job       Job[]
}

enum VpnStatus {
  ONLINE
  OFFLINE
  WARNING
  PENDING
}

model Job {
  id        String   @id @default(cuid())
  vpnId     String
  type      String
  status    String
  output    String?
  createdAt DateTime @default(now())
  vpn       Vpn      @relation(fields: [vpnId], references: [id])
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  stripeSubId   String   @unique
  status        String   @default("active")
  planId        String
  maxActiveVpns Int
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model SubscriptionLinkTemplate {
  id          Int      @id @default(1)
  urlTemplate String
  updatedAt   DateTime @updatedAt
}

enum AuditAction {
  LOGIN
  LOGOUT
  VPN_CREATE
  VPN_DELETE
  VPN_RESTART
  TEMPLATE_EDIT
  SUBSCRIPTION_STATUS
}

model AuditLog {
  id        String      @id @default(cuid())
  userId    String?
  action    AuditAction
  payload   Json
  createdAt DateTime    @default(now())
  user      User?       @relation(fields: [userId], references: [id])
}

model SubPushQueue {
  id          String    @id @default(cuid())
  uuid        String    @unique
  subString   String
  tries       Int       @default(0)
  lastError   String?
  nextRetryAt DateTime?
}

model PreallocatedUid {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique
  isFree     Boolean   @default(true)
  assignedAt DateTime?
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @unique
}
